{"remainingRequest":"/home/yellow/Developer/OD-buoy/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yellow/Developer/OD-buoy/src/views/Trends.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yellow/Developer/OD-buoy/src/views/Trends.vue","mtime":1630872812000},{"path":"/home/yellow/Developer/OD-buoy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yellow/Developer/OD-buoy/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/yellow/Developer/OD-buoy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yellow/Developer/OD-buoy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { GChart } from 'vue-google-charts'\n\nexport default {\n\n  components: {\n    GChart,\n  },\n  data (){\n    return {\n      chosenMeasurements: [],\n      measurements: this.prettifyMeasurementNames(),\n      gChartData: [['Time', 'Value'], ['12:00:01', 5]],\n      startDate: this.getYesterday(),\n      endDate: new Date().toISOString().substr(0, 10),\n      startDateMenu: false,\n      endDateMenu: false,\n      chartOptions: {\n        chart: {\n          title: this.name,\n          subtitle: this.name,\n\n        },\n        backgroundColor: this.$vuetify.theme.themes.light.accent,\n      },\n      chartData: [\n        ['Date', 'Value'],\n        ['12/01/01', 12],\n        ['13/01/01', 13],\n      ],\n      ticksLabels: ['Min', 'Hours', 'Days'],\n      granularity: 2,\n    }\n  },\n  computed: {\n  },\n  watch: {\n    chosenMeasurements(){\n      this.getChartData();\n    },\n    startDate(){\n      this.getChartData()\n    },\n    endDate(){\n      this.getChartData()\n    },\n    granularity(){\n      this.getChartData()\n    }\n  },\n  methods: {\n    getYesterday(){\n      let d = new Date()\n      d.setDate(d.getDate() - 1);\n      return d.toISOString().substr(0, 10);\n    },\n    prettifyMeasurementNames(){\n      return this.$store.getters.trendMeasurementNames\n      .map(\n        name => name.split('_')).map(\n          name => (name.map(\n            el=> (el.charAt(0).toUpperCase() + el.slice(1))\n          )).join(' ')\n        )\n    },\n    getChartData(){\n      let measurementNames;\n      if (this.chosenMeasurements.length == 0) return;\n      else {\n        measurementNames = this.chosenMeasurements.map(\n          name => name.split(' ')).map(\n            name => (name.map(\n              el=> (el.charAt(0).toLowerCase() + el.slice(1))\n            )).join(' ')\n          )\n      }\n\n      (async () => {\n        let payload = {};\n        payload.chosenMeasurements = measurementNames;\n        payload.startDate = this.startDate;\n        payload.endDate = this.endDate;\n        payload.granularity = this.granularity;\n        const baseURL = this.$store.state.piUrl;\n        try{\n          const rawResponse = await fetch(`${baseURL}/trends`, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          let data = await rawResponse.json();\n\n          console.log(data);\n          data = data.map( (el, idx) => {\n            if (idx!==0){\n              el[0] = new Date(el[0]);\n              return el\n            }\n            else{\n              return el\n            }\n          });\n          this.chartData = data;\n\n        }\n        catch(err){\n          console.log(\"ERR \", err);\n        }\n\n      })();\n\n    },\n    downloadCSV(){\n      let csv = '';\n      for(let i = 0; i < this.chartData.length; i++) {\n        for(let j = 0; j < this.chartData[i].length; j++) {\n          csv += this.chartData[i][j] + ',';\n        }\n        csv += '\\n';\n      }\n      const element = document.createElement('a');\n      const name = `${this.chosenMeasurements.join(' ')} ${this.startDate}-${this.endDate}.csv`;\n      element.setAttribute('download', name);\n      element.setAttribute('href', 'data:application/octet-stream,' + encodeURIComponent(csv));\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    },\n  },\n}\n",{"version":3,"sources":["Trends.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"Trends.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"html\">\n  <div class=\"trends\">\n     <v-container grid-list-md text-xs-center>\n      <v-layout row wrap>\n        <v-flex xs12 sm6 md5 ma-1>\n          <v-subheader>Measurements</v-subheader>\n          <v-select\n            v-model=\"chosenMeasurements\"\n            :items=\"measurements\"\n            attach\n            chips\n            multiple\n          ></v-select>\n        </v-flex>\n\n        <v-flex xs12 sm6 md2 ma-1>\n          <v-subheader>Start Date</v-subheader>\n          <v-menu\n            v-model=\"startDateMenu\"\n            :close-on-content-click=\"false\"\n            :nudge-right=\"40\"\n            lazy\n            transition=\"scale-transition\"\n            offset-y\n            full-width\n            min-width=\"290px\"\n          >\n            <template v-slot:activator=\"{ on }\">\n              <v-text-field\n                v-model=\"startDate\"\n                prepend-icon=\"mdi-calendar-search\"\n                readonly\n                v-on=\"on\"\n              ></v-text-field>\n            </template>\n            <v-date-picker v-model=\"startDate\" @input=\"startDateMenu = false\"></v-date-picker>\n          </v-menu>\n        </v-flex>\n\n        <v-flex xs12 sm6 md2 ma-1>\n          <v-subheader>End Date</v-subheader>\n          <v-menu\n            v-model=\"endDateMenu\"\n            :close-on-content-click=\"false\"\n            :nudge-right=\"40\"\n            lazy\n            transition=\"scale-transition\"\n            offset-y\n            full-width\n            min-width=\"290px\"\n          >\n            <template v-slot:activator=\"{ on }\">\n              <v-text-field\n                v-model=\"endDate\"\n                prepend-icon=\"mdi-calendar-search\"\n                readonly\n                v-on=\"on\"\n              ></v-text-field>\n            </template>\n            <v-date-picker v-model=\"endDate\" @input=\"endDateMenu = false\"></v-date-picker>\n          </v-menu>\n        </v-flex>\n\n        <v-flex md2 ma-1>\n          <v-subheader>Granularity</v-subheader>\n          <v-slider\n           v-model=\"granularity\"\n           :tick-labels=\"ticksLabels\"\n           :max=\"2\"\n           step=\"1\"\n           ticks=\"always\"\n           tick-size=\"4\"\n         ></v-slider>\n        </v-flex>\n\n\n        <v-flex xs12>\n          <v-card color=\"primary\" pa-5>\n            <v-card-text>\n              <GChart\n              id=\"trendsChart\"\n              :style=\"{height: '50vh'}\"\n              type=\"LineChart\"\n              :data=\"chartData\"\n              :options=\"chartOptions\"\n              />\n            </v-card-text>\n            <v-card-actions>\n\n              <v-btn\n                 absolute\n                 dark\n                 fab\n                 bottom\n                 right\n                 color=\"pink\"\n                 @click=\"downloadCSV\"\n               >\n                 <v-icon>mdi-download</v-icon>\n               </v-btn>\n\n            </v-card-actions>\n          </v-card>\n\n        </v-flex>\n\n\n        <v-spacer></v-spacer>\n      </v-layout>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport { GChart } from 'vue-google-charts'\n\nexport default {\n\n  components: {\n    GChart,\n  },\n  data (){\n    return {\n      chosenMeasurements: [],\n      measurements: this.prettifyMeasurementNames(),\n      gChartData: [['Time', 'Value'], ['12:00:01', 5]],\n      startDate: this.getYesterday(),\n      endDate: new Date().toISOString().substr(0, 10),\n      startDateMenu: false,\n      endDateMenu: false,\n      chartOptions: {\n        chart: {\n          title: this.name,\n          subtitle: this.name,\n\n        },\n        backgroundColor: this.$vuetify.theme.themes.light.accent,\n      },\n      chartData: [\n        ['Date', 'Value'],\n        ['12/01/01', 12],\n        ['13/01/01', 13],\n      ],\n      ticksLabels: ['Min', 'Hours', 'Days'],\n      granularity: 2,\n    }\n  },\n  computed: {\n  },\n  watch: {\n    chosenMeasurements(){\n      this.getChartData();\n    },\n    startDate(){\n      this.getChartData()\n    },\n    endDate(){\n      this.getChartData()\n    },\n    granularity(){\n      this.getChartData()\n    }\n  },\n  methods: {\n    getYesterday(){\n      let d = new Date()\n      d.setDate(d.getDate() - 1);\n      return d.toISOString().substr(0, 10);\n    },\n    prettifyMeasurementNames(){\n      return this.$store.getters.trendMeasurementNames\n      .map(\n        name => name.split('_')).map(\n          name => (name.map(\n            el=> (el.charAt(0).toUpperCase() + el.slice(1))\n          )).join(' ')\n        )\n    },\n    getChartData(){\n      let measurementNames;\n      if (this.chosenMeasurements.length == 0) return;\n      else {\n        measurementNames = this.chosenMeasurements.map(\n          name => name.split(' ')).map(\n            name => (name.map(\n              el=> (el.charAt(0).toLowerCase() + el.slice(1))\n            )).join(' ')\n          )\n      }\n\n      (async () => {\n        let payload = {};\n        payload.chosenMeasurements = measurementNames;\n        payload.startDate = this.startDate;\n        payload.endDate = this.endDate;\n        payload.granularity = this.granularity;\n        const baseURL = this.$store.state.piUrl;\n        try{\n          const rawResponse = await fetch(`${baseURL}/trends`, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          let data = await rawResponse.json();\n\n          console.log(data);\n          data = data.map( (el, idx) => {\n            if (idx!==0){\n              el[0] = new Date(el[0]);\n              return el\n            }\n            else{\n              return el\n            }\n          });\n          this.chartData = data;\n\n        }\n        catch(err){\n          console.log(\"ERR \", err);\n        }\n\n      })();\n\n    },\n    downloadCSV(){\n      let csv = '';\n      for(let i = 0; i < this.chartData.length; i++) {\n        for(let j = 0; j < this.chartData[i].length; j++) {\n          csv += this.chartData[i][j] + ',';\n        }\n        csv += '\\n';\n      }\n      const element = document.createElement('a');\n      const name = `${this.chosenMeasurements.join(' ')} ${this.startDate}-${this.endDate}.csv`;\n      element.setAttribute('download', name);\n      element.setAttribute('href', 'data:application/octet-stream,' + encodeURIComponent(csv));\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    },\n  },\n}\n</script>\n"]}]}